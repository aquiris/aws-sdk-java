package com.amazonaws.services.dynamodbv2.datamodeling.util;

import static com.amazonaws.services.dynamodbv2.datamodeling.util.FieldUtils.isFieldGetterAnnotatedWith;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Field;

/**
 * @author Caio Northfleet (caio.northfleet@aquiris.com.br)
 * @since 19/08/2016
 */
public class ItemConverterUtils {
  private static final Logger logger = LoggerFactory.getLogger(ItemConverterUtils.class);

  private static final String NULL_STRING = "NULL_STRING";

  /**
   * Checks whether the provided object has any null values that need special treatment. If so,
   * apply changes in place (i.e., the provided object gets modified).
   *
   * @param object The object to be checked.
   */
  public static <T> void convertToNullStringValues(T object) {
    Class<?> objectClass = object.getClass();
    do {
      Field[] fields = objectClass.getDeclaredFields();
      for (Field field : fields) {
        field.setAccessible(true);
        try {
          Class<?> fieldType = field.getType();
          if (fieldType.equals(String.class)
              && !isFieldGetterAnnotatedWith(object, field, DynamoDBAutoGeneratedKey.class)) {
            Object value = field.get(object);
            if (value == null) {
              field.set(object, NULL_STRING);
            }
          }
        } catch (IllegalAccessException ex) {
          logger.debug("Reflection fail", ex);
        }
        field.setAccessible(false);
      }
      objectClass = objectClass.getSuperclass();
    }
    while (!objectClass.equals(Object.class));
  }

  /**
   * Checks whether the provided object has any null values that need special treatment. If so,
   * apply changes in place (i.e., the provided object gets modified).
   *
   * @param object The object to be checked.
   */
  public static <T> void convertToNullValues(T object) {
    Class<?> objectClass = object.getClass();
    do {
      Field[] fields = objectClass.getDeclaredFields();
      for (Field field : fields) {
        field.setAccessible(true);
        try {
          Class<?> fieldType = field.getType();
          if (fieldType.equals(String.class)
              && !isFieldGetterAnnotatedWith(object, field, DynamoDBAutoGeneratedKey.class)) {
            Object value = field.get(object);
            if (value != null && value.equals(NULL_STRING)) {
              field.set(object, null);
            }
          }
        } catch (IllegalAccessException ex) {
          logger.debug("Reflection fail", ex);
        }
        field.setAccessible(false);
      }
      objectClass = objectClass.getSuperclass();
    }
    while (!objectClass.equals(Object.class));
  }
}
