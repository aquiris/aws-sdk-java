package com.amazonaws.services.dynamodbv2.datamodeling.util;

import static com.amazonaws.services.dynamodbv2.datamodeling.util.FieldUtils.isFieldGetterAnnotatedWith;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.Field;

/**
 * @author Caio Northfleet (caio.northfleet@aquiris.com.br)
 * @since 19/08/2016
 */
public class ItemConverterUtils {

  private static final Logger logger = LoggerFactory.getLogger(ItemConverterUtils.class);

  private static final String NULL_STRING = "NULL_STRING";
  private static final String EMPTY_STRING = "EMPTY_STRING";

  /**
   * Process inbound null or empty strings.
   *
   * @param object the object to be changed
   */
  public static <T> void inboundStringValuesConverter(T object) {
    stringValuesConverter(object, true);
  }

  /**
   * Process outbound null or empty strings.
   *
   * @param object the object to be changed
   */
  public static <T> void outboundStringValuesConverter(T object) {
    stringValuesConverter(object, false);
  }

  /**
   * Checks whether the provided object has any null or empty strings that need special treatment.
   * If so, apply changes in place (i.e., the provided object gets modified).
   *
   * @param object  the object to be checked
   * @param inbound whether this is an inbound operation or not
   */
  private static <T> void stringValuesConverter(T object, boolean inbound) {
    if (object != null) {
      Class<?> objectClass = object.getClass();
      while (!objectClass.equals(Object.class)) {
        Field[] fields = objectClass.getDeclaredFields();
        for (Field field : fields) {
          field.setAccessible(true);
          try {
            Class<?> fieldType = field.getType();
            if (fieldType.equals(String.class)
                && !isFieldGetterAnnotatedWith(object, field, DynamoDBAutoGeneratedKey.class)) {
              String value = (String) field.get(object);
              if (inbound) {
                if (value == null) {
                  field.set(object, NULL_STRING);
                } else if (value.isEmpty()) {
                  field.set(object, EMPTY_STRING);
                }
              } else {
                if (value != null) {
                  if (value.equals(NULL_STRING)) {
                    field.set(object, null);
                  } else if (value.equals(EMPTY_STRING)) {
                    field.set(object, "");
                  }
                }
              }
            }
          } catch (IllegalAccessException ex) {
            logger.debug("Reflection fail", ex);
          }
          field.setAccessible(false);
        }
        objectClass = objectClass.getSuperclass();
      }
    }
  }
}
